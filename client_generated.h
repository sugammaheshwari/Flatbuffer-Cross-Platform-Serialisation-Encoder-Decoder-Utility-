// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENT_H_
#define FLATBUFFERS_GENERATED_CLIENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct Msg;
struct MsgBuilder;

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Msg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LEN = 4
  };
  int32_t len() const {
    return GetField<int32_t>(VT_LEN, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_LEN, 4) &&
           verifier.EndTable();
  }
};

struct MsgBuilder {
  typedef Msg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_len(int32_t len) {
    fbb_.AddElement<int32_t>(Msg::VT_LEN, len, 0);
  }
  explicit MsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Msg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Msg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Msg> CreateMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t len = 0) {
  MsgBuilder builder_(_fbb);
  builder_.add_len(len);
  return builder_.Finish();
}

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_AGE = 8,
    VT_WEIGHT = 10,
    VT_GENDER = 12
  };
  int16_t id() const {
    return GetField<int16_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int16_t age() const {
    return GetField<int16_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  bool gender() const {
    return GetField<uint8_t>(VT_GENDER, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ID, 2) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_AGE, 2) &&
           VerifyField<float>(verifier, VT_WEIGHT, 4) &&
           VerifyField<uint8_t>(verifier, VT_GENDER, 1) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int16_t id) {
    fbb_.AddElement<int16_t>(Person::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(int16_t age) {
    fbb_.AddElement<int16_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Person::VT_WEIGHT, weight, 0.0f);
  }
  void add_gender(bool gender) {
    fbb_.AddElement<uint8_t>(Person::VT_GENDER, static_cast<uint8_t>(gender), 0);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int16_t age = 0,
    float weight = 0.0f,
    bool gender = false) {
  PersonBuilder builder_(_fbb);
  builder_.add_weight(weight);
  builder_.add_name(name);
  builder_.add_age(age);
  builder_.add_id(id);
  builder_.add_gender(gender);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Person> CreatePersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t id = 0,
    const char *name = nullptr,
    int16_t age = 0,
    float weight = 0.0f,
    bool gender = false) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CreatePerson(
      _fbb,
      id,
      name__,
      age,
      weight,
      gender);
}

struct Group FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_AVG_AGE = 8,
    VT_AVG_WEIGHT = 10,
    VT_NAMES_CNT = 12,
    VT_NAMES = 14
  };
  int16_t id() const {
    return GetField<int16_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  float avg_age() const {
    return GetField<float>(VT_AVG_AGE, 0.0f);
  }
  float avg_weight() const {
    return GetField<float>(VT_AVG_WEIGHT, 0.0f);
  }
  int16_t names_cnt() const {
    return GetField<int16_t>(VT_NAMES_CNT, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NAMES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ID, 2) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<float>(verifier, VT_AVG_AGE, 4) &&
           VerifyField<float>(verifier, VT_AVG_WEIGHT, 4) &&
           VerifyField<int16_t>(verifier, VT_NAMES_CNT, 2) &&
           VerifyOffset(verifier, VT_NAMES) &&
           verifier.VerifyVector(names()) &&
           verifier.VerifyVectorOfStrings(names()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int16_t id) {
    fbb_.AddElement<int16_t>(Group::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Group::VT_NAME, name);
  }
  void add_avg_age(float avg_age) {
    fbb_.AddElement<float>(Group::VT_AVG_AGE, avg_age, 0.0f);
  }
  void add_avg_weight(float avg_weight) {
    fbb_.AddElement<float>(Group::VT_AVG_WEIGHT, avg_weight, 0.0f);
  }
  void add_names_cnt(int16_t names_cnt) {
    fbb_.AddElement<int16_t>(Group::VT_NAMES_CNT, names_cnt, 0);
  }
  void add_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> names) {
    fbb_.AddOffset(Group::VT_NAMES, names);
  }
  explicit GroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Group> CreateGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    int16_t names_cnt = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> names = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_names(names);
  builder_.add_avg_weight(avg_weight);
  builder_.add_avg_age(avg_age);
  builder_.add_name(name);
  builder_.add_names_cnt(names_cnt);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Group> CreateGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t id = 0,
    const char *name = nullptr,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    int16_t names_cnt = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *names = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto names__ = names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*names) : 0;
  return CreateGroup(
      _fbb,
      id,
      name__,
      avg_age,
      avg_weight,
      names_cnt,
      names__);
}

#endif  // FLATBUFFERS_GENERATED_CLIENT_H_
